name: C++ CI
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Cache gtkmm4
      id: cache-gtkmm4
      uses: actions/cache@v3
      with:
        path: .github-deps/prefix
        key: ${{ runner.os }}-gtkmm4

    - name: Install zig
      run: ./.zig.sh

    - name: Install Packages (cache miss)
      if: steps.cache-gtkmm4.outputs.cache-hit != 'true'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: python3-pip libglu1-mesa-dev libglm-dev libglfw3-dev libzstd-dev cmake libxml2-dev xsltproc libstdc++-12-dev dpkg-dev iso-codes libpng-dev libpolkit-gobject-1-dev librsvg2-common librsvg2-dev libswscale-dev libtiff-dev libvulkan-dev libwayland-dev libx11-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbcommon-dev libxkbfile-dev libxml2-utils locales locales-all pkg-config shared-mime-info gettext doxygen
        version: 1.0

    - name: Install Packages (cache hit)
      if: steps.cache-gtkmm4.outputs.cache-hit == 'true'
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: libglu1-mesa-dev libglm-dev libglfw3-dev libzstd-dev libpango1.0-dev libgraphene-1.0-dev
        version: 1.0

    # - name: Setup upterm session
    #   uses: lhotari/action-upterm@v1
    #   with:
    #     limit-access-to-actor: true
    #     limit-access-to-users: heimskr

    - name: Build gtkmm4
      if: steps.cache-gtkmm4.outputs.cache-hit != 'true'
      run: ./.gtkmm4.sh

    - name: Compile
      run: make -j2 zip GITHUB=true BUILD=nonnative

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{github.run_number}}
        release_name: Game3
        draft: true
        prerelease: false

    - name: Upload game3.zip
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./game3.zip
        asset_name: game3.zip
        asset_content_type: application/zip

    - name: Publish Release
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
